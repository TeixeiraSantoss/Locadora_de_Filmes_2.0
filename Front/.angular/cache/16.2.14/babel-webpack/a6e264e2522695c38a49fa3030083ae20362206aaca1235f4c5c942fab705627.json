{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\n//O AuthService vai conter a logica necessaria para gerenciar a autenticação do usuario\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    //Vai rastrear se o usuario esta logado ou não na aplicação\n    this.isAuthenticated = false;\n    //Vai armazenar qual o tipo de usuario está acessando a aplicação, se é \"Admin\" ou \"User\"\n    this.userRole = null;\n  }\n  login(email, password) {\n    return this.http.post('https://localhost:7187/api/usuario/login', {\n      email,\n      password\n    }).subscribe(response => {\n      this.isAuthenticated = true;\n      this.userRole = response.role;\n      localStorage.setItem('userRole', this.userRole);\n      this.router.navigate(['/home']);\n    }, error => {\n      alert(error.error);\n    });\n  }\n  logout() {\n    this.isAuthenticated = false;\n    this.userRole = null;\n    localStorage.removeItem('userRole');\n    this.router.navigate(['/login']);\n  }\n  isAdmin() {\n    return this.userRole === 'Admin';\n  }\n  isUser() {\n    return this.userRole === 'User';\n  }\n  get getAuthenticated() {\n    return this.isAuthenticated;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","router","isAuthenticated","userRole","login","email","password","post","subscribe","response","role","localStorage","setItem","navigate","error","alert","logout","removeItem","isAdmin","isUser","getAuthenticated","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["D:\\ESTUDO\\Locadora(Filmes)\\Front\\src\\app\\services\\auth.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n//O AuthService vai conter a logica necessaria para gerenciar a autenticação do usuario\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  //Vai rastrear se o usuario esta logado ou não na aplicação\r\n  private isAuthenticated = false;\r\n\r\n  //Vai armazenar qual o tipo de usuario está acessando a aplicação, se é \"Admin\" ou \"User\"\r\n  private userRole: string | null = null;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n\r\n  login(email: string, password: string) {\r\n    return this.http.post<{username: string, email: string, role: string}>('https://localhost:7187/api/usuario/login', { email, password })\r\n      .subscribe(response => {\r\n        this.isAuthenticated = true;\r\n        this.userRole = response.role;\r\n        localStorage.setItem('userRole', this.userRole);\r\n        this.router.navigate(['/home']);\r\n      }, error => {\r\n        alert(error.error);\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    this.isAuthenticated = false;\r\n    this.userRole = null;\r\n    localStorage.removeItem('userRole');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  isAdmin() {\r\n    return this.userRole === 'Admin';\r\n  }\r\n\r\n  isUser() {\r\n    return this.userRole === 'User';\r\n  }\r\n\r\n  get getAuthenticated(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n}"],"mappings":";;;AAIA;AAIA,OAAM,MAAOA,WAAW;EAOtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IANpD;IACQ,KAAAC,eAAe,GAAG,KAAK;IAE/B;IACQ,KAAAC,QAAQ,GAAkB,IAAI;EAEyB;EAG/DC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAkD,0CAA0C,EAAE;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACpIE,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAI,CAACP,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,QAAQ,GAAGM,QAAQ,CAACC,IAAI;MAC7BC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAACT,QAAQ,CAAC;MAC/C,IAAI,CAACF,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,EAAEC,KAAK,IAAG;MACTC,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,CAAC,CAAC;EACN;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAACd,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpBQ,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACnC,IAAI,CAAChB,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAK,OAAOA,CAAA;IACL,OAAO,IAAI,CAACf,QAAQ,KAAK,OAAO;EAClC;EAEAgB,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAChB,QAAQ,KAAK,MAAM;EACjC;EAEA,IAAIiB,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAAClB,eAAe;EAC7B;EAAC,QAAAmB,CAAA,G;qBAvCUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}